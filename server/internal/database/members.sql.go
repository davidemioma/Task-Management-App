// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: members.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createMember = `-- name: CreateMember :exec
INSERT INTO members (id, user_id, workspace_id, role, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateMemberParams struct {
	ID          uuid.UUID
	UserID      uuid.UUID
	WorkspaceID uuid.UUID
	Role        string
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) CreateMember(ctx context.Context, arg CreateMemberParams) error {
	_, err := q.db.ExecContext(ctx, createMember,
		arg.ID,
		arg.UserID,
		arg.WorkspaceID,
		arg.Role,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getMember = `-- name: GetMember :one
SELECT id, user_id, workspace_id, role, created_at, updated_at FROM members WHERE workspace_id = $1 AND user_id = $2
`

type GetMemberParams struct {
	WorkspaceID uuid.UUID
	UserID      uuid.UUID
}

func (q *Queries) GetMember(ctx context.Context, arg GetMemberParams) (Member, error) {
	row := q.db.QueryRowContext(ctx, getMember, arg.WorkspaceID, arg.UserID)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WorkspaceID,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
