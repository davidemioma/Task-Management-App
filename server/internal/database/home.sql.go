// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: home.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getSomeMembers = `-- name: GetSomeMembers :many
SELECT m.id, m.role, u.username, u.email, u.image
FROM members m
JOIN users u ON m.user_id = u.id
WHERE m.workspace_id = $1
ORDER BY m.created_at ASC
LIMIT 5
`

type GetSomeMembersRow struct {
	ID       uuid.UUID
	Role     string
	Username string
	Email    string
	Image    sql.NullString
}

func (q *Queries) GetSomeMembers(ctx context.Context, workspaceID uuid.UUID) ([]GetSomeMembersRow, error) {
	rows, err := q.db.QueryContext(ctx, getSomeMembers, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSomeMembersRow
	for rows.Next() {
		var i GetSomeMembersRow
		if err := rows.Scan(
			&i.ID,
			&i.Role,
			&i.Username,
			&i.Email,
			&i.Image,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSomeProjects = `-- name: GetSomeProjects :many
SELECT id, workspace_id, name, image_url, created_at, updated_at FROM projects
WHERE workspace_id = $1
ORDER BY created_at DESC
LIMIT 5
`

func (q *Queries) GetSomeProjects(ctx context.Context, workspaceID uuid.UUID) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, getSomeProjects, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.Name,
			&i.ImageUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
